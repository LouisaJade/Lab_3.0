---
title: "Lab-03"
subtitle: ESS330
author:
  - name: Louisa
    email: beckettl@colostate.edu
format: html
date: "2025-03-08"
---

### WHEN FINISHED ADD COMMIT PUSH AND SUBMIT URL FROM GREEN CODE BUTTON

```{r}
library(tidyverse)
library(zoo)
library(flextable)
```

## question 1

# Access to both historical and real-time data allows for all people do have all the facts and make decisions for themselves based on the facts. This typically will encourage people to care more about the environment as they have a better understanding of climate trends, local resources and public health.
# When this data disappears or becomes inaccessible, it encourages the spread of misinformation which can and usually will lead to much bigger problems. Much like those problems we have seen appear over the last month.


## question 2

```{r}
library(tidyverse)
library(flextable)

url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
covid_data = read_csv(url)
```

```{r}
txt <- "2022-02-01"
class(txt)

my.date <- as.Date(txt)
class(my.date)
```

```{r}
my.state <- "Colorado"
```


```{r}
colorado <- covid_data |>
  filter(state == my.state) |>
  group_by(county) |>
  arrange(date) |>
   mutate(
    new_cases = cases - lag(cases),
    new_deaths = deaths - lag(deaths)
  ) |>
  ungroup()

print(colorado)
```



```{r}
most_cumulative_cases <- filter(colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(date = date, county = county, cases = cases) |>
  flextable() |>
  set_caption("Most Total Cases")


most_new_cases <- filter(colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(date = date, county = county, cases = new_cases) |>
  flextable() |>
  set_caption(caption = "Most New Cases")

most_cumulative_cases
most_new_cases
```


#question 3

```{r}
library(tidyverse)
library(flextable)

pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
population_data <- read_csv(pop_url)

print(population_data)
```


```{r}
#3
population_data <- population_data |>
  mutate(
    STATE = sprintf("%02d", as.numeric(STATE)),
    COUNTY = sprintf("%03d", as.numeric(COUNTY)),
    FIP = paste0(STATE, COUNTY)
  )

print(population_data)
```



```{r}
#3.1
population_data <- population_data |>
  select(matches("NAME|2021"), FIP) |>
  filter("COUNTY" != "000")

print(population_data)
```
```{r}
#3.2
names(population_data)
dim(population_data)
nrow(population_data)
str(population_data)
glimpse(population_data)
skimr::skim(population_data)

#The population data attributes include: `NAME`, `POPESTIMATE2021`, and `FIP`. The columns are: `NAME`, `STATE`, `COUNTY`, `POPESTIMATE2021`, and `FIP`. The `FIP` column matches the COVID data if it also has a `FIP` code. There are 16 rows and 11 columns. This data shows the population of each county in 2021, with state data removed, so it can be used with the COVID data for per person calculations.

```



```{r}
#3.3
colorado_populations <- population_data |>
  filter(substr(FIP, 1, 2) == "08")

colorado_range_population <- range(colorado_populations$POPESTIMATE2021, na.rm = TRUE)

print(colorado_range_population)
```



```{r}
#3.4
colorado_merged <- colorado |>
  mutate(county = paste0(county, " County")) |>
  full_join(colorado_populations, by = c("county" = "CTYNAME"))

colorado_per_capita <- colorado_merged |>
  mutate(
    per_capita_cases = cases / POPESTIMATE2021,
    per_capita_new_cases = new_cases / POPESTIMATE2021,
    per_capita_new_deaths = new_deaths / POPESTIMATE2021
  )

print(colorado_per_capita)

```


```{r}
#3.5
target_date <- "2021-01-01"

colorado_on_date <- colorado_per_capita |>
  filter(date == target_date)

most_cumulative_per_capita <- colorado_on_date |>
  slice_max(per_capita_cases, n = 5) |>
  select(date, county, cases) |>
  flextable() |>
  set_caption("Top 5 Counties with Most Cumulative Cases per Capita on 2021-01-01") |>
  set_header_labels(
    date = "Date",
    county = "County",
    cases = "Cumulative Cases per Capita"
  )

most_new_cases_per_capita <- colorado_on_date |>
  slice_max(new_cases, n = 5) |>
  select(date, county, new_cases) |>
  flextable() |>
  set_caption("Top 5 Counties with Most New Cases per Capita on 2021-01-01") |>
  set_header_labels(
    date = "Date",
    county = "County",
    new_cases = "New Cases per Capita"
  )

most_cumulative_per_capita
most_new_cases_per_capita

```




```{r}
#4
colorado_merged <- colorado_merged |>
  mutate(date = as.Date(date, format = "%Y-%m-%d"))

library(dplyr)

last_14_days_data <- colorado_merged |>
  filter(date >= as.Date("2022-01-17"), date <= as.Date("2022-01-31"))


county_new_cases <- last_14_days_data |>
  group_by(county, POPESTIMATE2021) |>
  summarize(total_new_cases = sum(new_cases, na.rm = TRUE)) |>
  mutate(new_cases_per_100k = (total_new_cases / POPESTIMATE2021) * 100000) |>
  arrange(desc(new_cases_per_100k))

top_5_counties <- county_new_cases |>
  slice_head(n = 5)

top_5_counties |>
  flextable() |>
  set_caption("Top 5 Counties with Most New Cases per 100,000 Residents")

watch_list_counties <- county_new_cases |>
  filter(new_cases_per_100k > 100)

watch_list_counties_count <- nrow(watch_list_counties)

print(watch_list_counties_count)
```


```{r}
#5
covid_deaths_summary <- colorado %>%
  filter(date >= "2021-01-01" & date <= "2021-12-31") %>%
  group_by(county) %>%
  summarize(total_covid_deaths = sum(new_deaths, na.rm = TRUE), .groups = "drop")

death_ratio_data <- covid_deaths_summary %>%
  left_join(population_data %>% select(county = CTYNAME, DEATHS2021), by = "county") %>%
  mutate(covid_death_ratio = (total_covid_deaths / DEATHS2021) * 100)


high_ratio_counties <- death_ratio_data %>%
  filter(covid_death_ratio >= 20)


ggplot(high_ratio_counties, aes(x = reorder(county, covid_death_ratio), y = covid_death_ratio, fill = covid_death_ratio)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Counties Where Covid Deaths Account for 20% or More of Total Deaths (2021)",
       x = "County",
       y = "COVID Deaths as % of Total Deaths",
       fill = "Percentage") +
  theme_minimal() +
  scale_fill_gradient(low = "yellow", high = "darkred")

```


```{r}
#6.1
library(dplyr)
library(zoo)

state_covid <- covid_data %>%
  group_by(date, state) %>%
  summarise(cases = sum(cases), .groups = 'drop') %>%
  filter(state %in% c('New York', "Ohio", 'Colorado', "Alabama")) %>%
  group_by(state) %>%
  mutate(
    newCases = cases - lag(cases),  # Calculate daily new cases
    roll = zoo::rollmean(newCases, k = 7, align = "right", fill = NA)
  ) %>%
  ungroup()

print(state_covid)
```

```{r}
#6.2
ggplot(state_covid, aes(x = date)) +
  geom_col(aes(y = newCases), fill = "purple", col = NA) +
  geom_line(aes(y = roll), col = "darkblue", size = 1) +
  theme_linedraw() +
  facet_wrap(~state, nrow = 2, scales = "free_y") +
  labs(title = "Cumulative COVID-19 Cases", x = "Date", y = "Case Count")
```

```{r}
#6.3
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
pop <- read.csv(pop_url)

str(pop)

pp <- pop %>%
  group_by(STNAME) %>%
  summarise(state_pop = sum(POPESTIMATE2021, na.rm = TRUE)) %>%
  inner_join(state_covid, by = c("STNAME" = "state")) %>%
  mutate(perCap = newCases / state_pop) %>%  
  group_by(STNAME) %>%
  mutate(roll = zoo::rollmean(perCap, k = 7, align = "right", fill = NA)) %>% 
  ungroup()

print(pp)

```


```{r}
#6.4
ggplot(pp, aes(x = date)) +
  geom_line(aes(y = roll, col = STNAME), size = 1) +
  theme_linedraw() +
  labs(title = "Cumulative COVID-19 Cases", x = "Date", y = "Case Count")

```


```{r}
#6.5
##scaling by population adjusts the case data to account for different state sizes, making comparisons fairer. Larger states look better, as their higher case counts are spread across a larger population. Smaller states look worse, as they have higher per capita rates but fewer total cases. 
```


```{r}
#7
county_cen = read_csv('https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv')
```

```{r}
#7.1
meta = read_csv('https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv') |>
  inner_join(covid_data) |>
  group_by(date) |>
  summarise(wmX_c = sum(LON*cases) / sum(cases), wmY_c = sum(LAT*cases) / sum(cases), cases = sum(cases)) |>
  arrange(date) |>
  mutate(d = 1:n())

ggplot(meta) +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(aes(x = wmX_c, y = wmY_c, size = cases), color = "red", alpha = .25) +
  theme_linedraw()+
  labs(size = "Cases", x = "", y = "", title = "Weighted Center of COVID-19 Cases") +
  theme(legend.position = "none")
```

